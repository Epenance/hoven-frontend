---
import MainNav, { type MenuItem } from "../components/MainNav";
import logo from '../assets/logo-white.png';
import colorLogo from '../assets/logo.png';
import Footer from "../components/Footer.astro";
import { strapiClient } from "../clients/strapi";
import { SEO } from "astro-seo";

// Type definitions for Strapi menu data
export interface StrapiMenuItem {
	id: number;
	documentId: string;
	title: string;
	description?: string;
	href: string;
	order: number;
	isActive: boolean;
	createdAt: string;
	updatedAt: string;
	publishedAt: string;
	parent?: StrapiMenuItem | null;
	children: StrapiMenuItem[];
}

const seoResource = strapiClient.single('seo', );

const seoData = await seoResource.find({
	populate: {
		Image: {
			populate: '*'
		}
	}
});

const defaultSeo = {
	TitleTemplate: '',
	Description: '',
	Image: {
		url: '',
		alternativeText: '',
		width: 0,
		height: 0
	},
	...seoData.data
};

const collection = strapiClient.collection('menus')

const menuItems = await collection.find({
	populate: {
		children: {
			populate: {
				children: {
					populate: {
						children: {
							populate: '*'
						}
					}
				}
			}
		},
		parent: true
	}
});

const pathname = Astro.url.pathname;

// Transform Strapi data to the format expected by MainNav
const transformMenuData = (items: StrapiMenuItem[]): MenuItem[] => {
	// First, filter to get only top-level items (no parent)
	const topLevelItems = items.filter(item => !item.parent);

	// Sort by order field
	const sortedItems = topLevelItems.sort((a, b) => (a.order || 0) - (b.order || 0));

	// Transform each item to the expected format
	return sortedItems.map(item => ({
		title: item.title,
		description: item.description,
		href: item.href,
		children: item.children && item.children.length > 0 ? transformMenuData(item.children) : []
	}));
};

const menu = transformMenuData(menuItems.data as StrapiMenuItem[]);

interface Props {
	title: string;
	seo?: {
		Title?: string;
		Description?: string;
		NoIndex?: boolean;
		Image?: {
			url: string;
			alternativeText?: string;
			width?: number;
			height?: number;
		};
	};
}

const { title, seo } = Astro.props;

// Merge provided SEO props with default SEO values
const finalSeo = {
	TitleTemplate: defaultSeo.TitleTemplate || '%s | Hoven Jagtforening',
	Title: seo?.Title || title,
	Description: seo?.Description || defaultSeo.Description || '',
	NoIndex: seo?.NoIndex || false,
	Image: {
		url: seo?.Image?.url || defaultSeo.Image?.url || colorLogo.src,
		alternativeText: seo?.Image?.alternativeText || defaultSeo.Image?.alternativeText || 'Hoven Jagtforening',
		width: seo?.Image?.width || defaultSeo.Image?.width || colorLogo.width,
		height: seo?.Image?.height || defaultSeo.Image?.height || colorLogo.height
	}
};
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="stylesheet" href="/css/fontawesome.min.css" />
		<link rel="stylesheet" href="/css/regular.min.css" />
		<link rel="stylesheet" href="/css/solid.min.css" />
		<meta name="generator" content={Astro.generator} />
		<title>{finalSeo.Title}</title>
		<SEO
			titleTemplate={finalSeo.TitleTemplate}
			title={finalSeo.Title}
			description={finalSeo.Description}
			noindex={finalSeo.NoIndex}
			openGraph={{
				basic: {
					title: finalSeo.Title,
					type: "website",
					image: finalSeo.Image.url,
				},
				optional: {
					description: finalSeo.Description,
				},
				image: {
					alt: finalSeo.Image.alternativeText,
					width: finalSeo.Image.width,
					height: finalSeo.Image.height,
				}
			}}
		/>
	</head>
	<body class="p-[113px_0_0]">
		<div class="fixed top-0 left-0 w-full bg-jagt-300 h-[113px] z-50">
			<div class="container mx-auto flex flex-row justify-between px-5 md:p-0 items-center h-full">
				<a href="/"> <img src={logo.src} alt="Hoven Jagtforening" class="w-[60px] md:w-[70px]"/></a>
				<MainNav data={menu} client:idle currentPath={pathname}/>
			</div>
		</div>
		<slot />
		<Footer></Footer>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}

</style>
